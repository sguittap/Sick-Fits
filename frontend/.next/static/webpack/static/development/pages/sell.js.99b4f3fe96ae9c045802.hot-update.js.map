{"version":3,"file":"static/webpack/static/development/pages/sell.js.99b4f3fe96ae9c045802.hot-update.js","sources":["webpack:///./components/CreateItem.js","webpack:///./components/ErrorMessage.js"],"sourcesContent":["import React, { Component } from 'react';\nimport {Mutation} from 'react-apollo';\nimport Form from './styles/Form';\nimport formatMoney from '../lib/formatMoney';\nimport gql from 'graphql-tag';\nimport Error from './ErrorMessage';\n\nconst CREATE_ITEM_MUTATION =  gql`\n    mutation  CREATE_ITEM_MUTATION(\n        $title: String!\n        $description: String!\n        $price: Int!\n        $image: String\n        $largeImage: String\n    ) {\n        createItem(\n            title: $title\n            description: $description\n            price: $price\n            image: $image\n            largeImage: $largeImage\n        ) {\n            id\n        }\n    }\n`;\n\n\nclass CreateItem extends Component {\n    state =  {\n        title:'',\n        description:'',\n        image:'',\n        largeImage:'',\n        price: 0,\n    };\n    \n    handleChange = (e) => {\n        const {name, type, value} = e.target;\n        const val = type === 'number' ? parseFloat(value) : value;\n        this.setState({[name]: val})\n    };\n\n    render() {\n        return (\n            <Mutation mutation={CREATE_ITEM_MUTATION} variables={this.state}>\n                {(createItem, {loading, error})=>(\n                    <Form onSubmit={(e)=> {\n                        e.preventDefault();\n                        console.log(this.state)\n                    }}>\n                        <Error error={error}/>\n                        <fieldset>\n                            <label htmlFor=\"title\">\n                                Title\n                                <input \n                                    type=\"text\" \n                                    id=\"title\" \n                                    name=\"title\" \n                                    placeholder=\"Title\" \n                                    required\n                                    value={this.state.title}\n                                    onChange={this.handleChange}>\n                                </input>\n                            </label>\n                        \n                            <label htmlFor=\"price\">\n                                Price\n                                <input \n                                    type=\"number\" \n                                    id=\"price\" \n                                    name=\"price\" \n                                    placeholder=\"Price\" \n                                    required\n                                    value={this.state.price}\n                                    onChange={this.handleChange}>\n                                </input>\n                            </label>\n                            \n                            <label htmlFor=\"description\">\n                                Description\n                                <textarea \n                                    id=\"description\" \n                                    name=\"description\" \n                                    placeholder=\"Enter a Description\" \n                                    required\n                                    value={this.state.description}\n                                    onChange={this.handleChange}>\n                                </textarea>\n                            </label>\n                            <button type=\"submit\">Submit</button>\n                        </fieldset>\n                    </Form>\n                )}\n            </Mutation>\n        )\n    }\n};\n\nexport default CreateItem;\nexport {CREATE_ITEM_MUTATION};","import styled from 'styled-components';\nimport React from 'react';\n\nimport PropTypes from 'prop-types';\n\nconst ErrorStyles = styled.div`\n  padding: 2rem;\n  background: white;\n  margin: 2rem 0;\n  border: 1px solid rgba(0, 0, 0, 0.05);\n  border-left: 5px solid red;\n  p {\n    margin: 0;\n    font-weight: 100;\n  }\n  strong {\n    margin-right: 1rem;\n  }\n`;\n\nconst DisplayError = ({ error }) => {\n  if (!error || !error.message) return null;\n  if (error.networkError && error.networkError.result && error.networkError.result.errors.length) {\n    return error.networkError.result.errors.map((error, i) => (\n      <ErrorStyles key={i}>\n        <p data-test=\"graphql-error\">\n          <strong>Shoot!</strong>\n          {error.message.replace('GraphQL error: ', '')}\n        </p>\n      </ErrorStyles>\n    ));\n  }\n  return (\n    <ErrorStyles>\n      <p data-test=\"graphql-error\">\n        <strong>Shoot!</strong>\n        {error.message.replace('GraphQL error: ', '')}\n      </p>\n    </ErrorStyles>\n  );\n};\n\nDisplayError.defaultProps = {\n  error: {},\n};\n\nDisplayError.propTypes = {\n  error: PropTypes.object,\n};\n\nexport default DisplayError;\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAoBA;;;;;;;;;;;;;;;;;;AACA;AACA;AACA;AACA;AACA;AACA;AALA;AACA;AAOA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAAA;AACA;AACA;;;;;;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAHA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AAAA;AAAA;AAAA;AAAA;AAAA;AAWA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AAAA;AAAA;AAAA;AAAA;AAAA;AAWA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AANA;AAAA;AAAA;AAAA;AAAA;AAAA;AASA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AA5CA;AAkDA;;;;AApEA;AACA;AAoEA;AAEA;;;;;;;;;;;;;;;;;;;;ACnGA;AACA;AAEA;AAEA;AAAA;AAAA;AAAA;AACA;AAcA;AAAA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAHA;AAQA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AACA;AACA;AACA;AADA;AAIA;AACA;AADA;AAIA;;;;A","sourceRoot":""}